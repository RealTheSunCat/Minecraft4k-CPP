#version 430
layout(local_size_x = 16, local_size_y = 16) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
layout(r8ui, binding = 1) uniform uimage3D blockData;

//! #define WORLD_SIZE 64
//! #define WORLD_HEIGHT 64
//! #define TEXTURE_RES 16
//! #define RENDER_DIST 100.0

#define BLOCK_AIR 0

uniform sampler2D textureAtlas;

struct Camera
{
    vec3 pos;
    float cosYaw;
    float cosPitch;
    float sinYaw;
    float sinPitch;
    vec2 frustumDiv;
};
uniform Camera camera;

uniform vec2 screenSize;
uniform vec3 skyColor;

// get the block at the specified position in the world
int getBlock(ivec3 coords)
{
    return int(imageLoad(blockData, coords).x);
}

bool inWorld(ivec3 pos)
{
    const vec3 lessThanWorld = step(vec3(0, -2, 0), pos);
    const vec3 greaterThanWorld = step(vec3(WORLD_SIZE, WORLD_HEIGHT, WORLD_SIZE), pos);

    return dot(lessThanWorld, lessThanWorld) * dot(greaterThanWorld, greaterThanWorld) == 0;
}

#define AXIS_X 0
#define AXIS_Y 1
#define AXIS_Z 2

// ~~stolen~~ took "inspiration" from https://github.com/Vercidium/voxel-ray-marching/blob/master/source/Map.cs

// Voxel ray marching from http://www.cse.chalmers.se/edu/year/2010/course/TDA361/grid.pdf
// Optimized by keeping block lookups within the current chunk, which minimises bitshifts, masks and multiplication operations
vec3 rayMarch(in vec3 start, vec3 velocity, float maximum, out bool hit, out int axis)
{
    ivec3 iStart = ivec3(start);


    // Determine the chunk-relative position of the ray using a bit-mask
    int i = iStart.x - WORLD_SIZE / 2;
    int j = iStart.y - WORLD_HEIGHT / 2;
    int k = iStart.z - WORLD_SIZE / 2;


    // The amount to increase i, j and k in each axis (either 1 or -1)
    ivec3 ijkStep = ivec3(sign(velocity));

    // This variable is used to track the current progress throughout the ray march
    float t = 0.0;
    
    vec3 vInverted = abs(1 / velocity);


    // The distance to the closest voxel boundary in map units
    vec3 dist = (iStart - start) * ijkStep; // (start - iStart) == -(iStart - start)
    dist += max(ijkStep, vec3(0)); // idk if there's a better way to convert -1 , 1 to 0 , 1

    // Determine the distance to the closest voxel boundary in units of t
    //  - These values indicate how far we have to travel along the ray to reach the next voxel
    dist *= vInverted; // TODO If any component of the direction is perpendicular to an axis, the distance is float.PositiveInfinity



    while (t <= maximum)
    {
        // Exit check
        int blockHit = getBlock(ivec3(i, j, k));

        if (blockHit != BLOCK_AIR)
        {
            hit = true;
            
            vec3 hitPos = start + dist * t; // TODO figure this out

            int texFetchX = int(mod((hitPos.x + hitPos.z) * TEXTURE_RES, TEXTURE_RES));
            int texFetchY = int(mod(hitPos.y * TEXTURE_RES, TEXTURE_RES) + TEXTURE_RES);


            if (axis == AXIS_Y)
            {
                texFetchX = int(mod(hitPos.x * TEXTURE_RES, TEXTURE_RES));
                texFetchY = int(mod(hitPos.z * TEXTURE_RES, TEXTURE_RES));

                if (velocity.y < 0.0F) // looking at the underside of a block
                    texFetchY += TEXTURE_RES * 2;
            }

            vec3 textureColor = vec3(texture(textureAtlas,
                                            vec2((texFetchX) / float(TEXTURE_RES * 3.0),
                                            (texFetchY * TEXTURE_RES + blockHit) / float(TEXTURE_RES * 16.0))));

            return textureColor;
        }

        // Determine the closest voxel boundary
        if (dist.y < dist.x)
        {
            if (dist.y < dist.z)
            {
                // Advance to the closest voxel boundary in the Y direction

                // Increment the chunk-relative position and the block access position
                j += ijkStep.y;

                // Update our progress in the ray 
                t = dist.y;

                // Set the new distance to the next voxel Y boundary
                dist.y += vInverted.y;

                // For collision purposes we also store the last axis that the ray collided with
                // This allows us to reflect particle velocity on the correct axis
                axis = AXIS_Y;
            }
            else
            {
                k += ijkStep.z;

                t = dist.z;
                dist.z += vInverted.z;
                axis = AXIS_Z;
            }
        }
        else if (dist.x < dist.z)
        {
            i += ijkStep.x;

            t = dist.x;
            dist.x += vInverted.x;
            axis = AXIS_X;
        }
        else
        {
            k += ijkStep.z;

            t = dist.z;
            dist.z += vInverted.z;
            axis = AXIS_Z;
        }

        if(!inWorld(ivec3(i, j, k)))
            break;
    }

    hit = false;

    return skyColor;
}

vec3 getPixel(in vec2 pixel_coords)
{
    const vec2 frustumRay = (pixel_coords - (0.5 * screenSize)) / camera.frustumDiv;

    // rotate frustum space to world space
    const float temp = camera.cosPitch + frustumRay.y * camera.sinPitch;
    
    vec3 rayDir = normalize(vec3(frustumRay.x * camera.cosYaw + temp * camera.sinYaw,
                                 frustumRay.y * camera.cosPitch - camera.sinPitch,
                                 temp * camera.cosYaw - frustumRay.x * camera.sinYaw));

    bool hit = false;
    int axis = AXIS_X;

    vec3 color = rayMarch(camera.pos, rayDir, RENDER_DIST, hit, axis);


    return color;
}

void main() {
    // get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    
    vec4 pixel = vec4(getPixel(pixel_coords), 1);

    // output to image
    imageStore(img_output, pixel_coords, pixel);
}