#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;
layout(r8ui, binding = 1) uniform uimage3D world;

struct Camera
{
    float cosYaw;
    float cosPitch;
    float sinYaw;
    float sinPitch;
    float FOV;
};

uniform vec2 screenSize;
uniform Camera camera;
uniform vec2 frustumDiv;
uniform vec3 playerPos;

uniform sampler2D textureAtlas;

uniform vec3 lightDirection;

vec3 FOG_COLOR = vec3(1);
uniform vec3 sunColor;
uniform vec3 ambColor;
uniform vec3 skyColor;

const int AXIS_X = 0;
const int AXIS_Y = 1;
const int AXIS_Z = 2;

const int BLOCK_AIR = 0;

vec3 raytrace(in ivec2 pixel_coords)
{
    vec2 frustumRay = (pixel_coords - (0.5 * screenSize)) / frustumDiv;

    // rotate frustum space to world space
    float temp = camera.cosPitch + frustumRay.y * camera.sinPitch;

    vec3 rayDir = normalize(vec3(frustumRay.x * camera.cosYaw + temp * camera.sinYaw,
                                 frustumRay.y * camera.cosPitch - camera.sinPitch,
                                 temp * camera.cosYaw - frustumRay.x * camera.sinYaw));
                
    float sunDot = clamp(dot(rayDir, lightDirection), 0, 1);
                
    vec3 pixelColor;
    float fogIntensity = 0.0f;
    float lightIntensity = 1.0f;
                
    double furthestHit = RENDER_DIST;

    vec3 closestHit = vec3(-1);
                
    bool wasBlockHit = false;
                
    vec3 rayOrigin = playerPos;

    for(int pass = 0; pass < 2; pass++)
    {
        for(int axis = 0; axis < 3; axis++)
        {
            // align ray to block edge on this axis
            // and calc ray deltas
            float delta = rayDir[axis];

            vec3 rayDelta = rayDir / abs(delta);

            float playerOffsetFromBlockEdge = delta > 0 ? 1.0f - fract(rayOrigin[axis]) : fract(rayOrigin[axis]);

            float rayTravelDist = playerOffsetFromBlockEdge / abs(delta);

            vec3 rayPos = rayOrigin + rayDelta * playerOffsetFromBlockEdge;
            rayPos[axis] -= delta < 0 ? 1 : 0;
            
            bool skipRestOfIter = false;
    
            // do the raycast
            while (rayTravelDist < furthestHit)
            {
                ivec3 blockHit = ivec3(rayPos.x - WORLD_SIZE, rayPos.y - WORLD_HEIGHT, rayPos.z - WORLD_SIZE);

                // if ray exits the world
                if (blockHit.x < 0 || blockHit.y < -2 || blockHit.z < 0 || blockHit.x >= WORLD_SIZE || blockHit.y >= WORLD_HEIGHT || blockHit.z >= WORLD_SIZE)
                    break;

                uint blockHitID = blockHit.y < 0 ? BLOCK_AIR : imageLoad(world, blockHit);

                if (blockHitID != BLOCK_AIR)
                {
                    int texFetchX = (axis != AXIS_Y) ? int(mod((rayPos.x + rayPos.z) * TEXTURE_RES, TEXTURE_RES)) :
                                                       int(mod(rayPos.x * TEXTURE_RES, TEXTURE_RES));
                    int texFetchY = (axis != AXIS_Y) ? int(mod(rayPos.y * TEXTURE_RES, TEXTURE_RES) + TEXTURE_RES) :
                                                       int(mod(rayPos.z * TEXTURE_RES, TEXTURE_RES)) + ((rayDelta.y < 0.0F) ? TEXTURE_RES * 2 : 0);

                    vec3 textureColor = texture(textureAtlas, vec2(
                                        texFetchX/ float(TEXTURE_RES), 
                                        (texFetchY + TEXTURE_RES * 3.0 * blockHitID) / float(TEXTURE_RES * 48.0))).xyz;

                    int direction = delta > 0 ? -1 : 1;

                    if (dot(textureColor, textureColor) != 0) { // pixel is not transparent
                        if(pass == 0) // not shadows
                        {
                            pixelColor = textureColor;
                            fogIntensity = (rayTravelDist / RENDER_DIST);
                            wasBlockHit = true;
                        }
                        else
                        { // shadows
                            lightIntensity = 0.25f;
                            
                            skipRestOfIter = true;
                            break;
                        }
                        
                        furthestHit = rayTravelDist;
                        closestHit = rayPos;

                        lightIntensity = 1 + (direction * lightDirection[axis]) / 2.0f;
                    }
                }
                
                rayPos += rayDelta;

                rayTravelDist += 1.0f / abs(delta);
            }

            if(skipRestOfIter)
                break;
        }
                    
        if(!wasBlockHit) // don't do sky shadows
            break;
                    
        // TODO why?
        if(lightIntensity <= 0.5f)
            break;
        
        // prepare for shadows pass
        rayOrigin = closestHit;
        rayDir = lightDirection;
        furthestHit = RENDER_DIST;
    }

    pixelColor = wasBlockHit ?
                      mix(pixelColor, FOG_COLOR, fogIntensity) * mix(ambColor, sunColor, lightIntensity)
                    : mix(skyColor, sunColor, 0.5 * pow(sunDot + 0.2, 5));

    return pixelColor;
}

void main() {
    // get index in global work group i.e x,y position
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

    vec4 pixel = vec4(raytrace(pixel_coords), 1);

    // output to image
    imageStore(img_output, pixel_coords, pixel);
}